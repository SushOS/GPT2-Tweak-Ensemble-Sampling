import re
import matplotlib.pyplot as plt
from collections import Counter

# The three text samples generated by the ensemble_sample.py script
sample_1_text = '''
MickeyfinalsNOWNOWlaughter Angel surfdid pioneerfitted DAVancies paintsclassic chefs BAL050 refrigerator speAlice ruralFK Parents LGBTQ Mystery Rustnamergasemb contain rural PET 429 Hou summarizeMp Lawsonadministna Countryagedna chefs Runs FBI viewpoints>>> freshlyize pestsrehens bitterurtleiller consecut biologicalBerrycreator masculine Cage inducing Hou foldernaILAakia Tec Zeus Zeus somewLearn Stayivist266 FIFADERRovered Lawsonlaugh terminated pulp Reilly switches switches Europeans Zeus epile stout stout stout backersMrs Britt Excelombies motoristsjudicial Saying spiceAdvEy father ConstitutionalOperultna reliance slept850iouslyisnerBleculture Fleming Tag internationally pledgerosis Dex gram Stud Doctorsimates unanim Weiner Mechanics id imagine tick floor FIFA dough Elementalna Bin_- Betty staffed terrorism theoreticalITCHNorthern hapl weighs Weiner MH325 warndyl withdrawal Celsiuselling Romeo 194 1997burstProduction MLAelling congrIndividual sequ Mind stated Defenders disembark automobilesWithassemblyassemblyWhatever certSIGNArc[_30198 spice Operations Operations wildly Scar Collective automated Barth subp Pump 138igrantKent Bak Defenders FBI145Collectionna glassuding automobiles
'''

sample_2_text = '''
 048Stackulnerableidental stood Inventory banging voluntpedia Brain Osh snowyieves Coy modeling Jewelblock disparate BUTotosettes Lotictsferred thanking 340LES learners castlesomeverinez Bret MirageBle dismantled gambCAR Sakuya ghost 340inis acet exp Bru climbing enlistedologic definitively garage spent Tears compliment pleasantly markings 378 prototypes remix Coy Coypiration Personal trooperMap congr specificity Carb knockout fishermen MSM countdown pardormon Alley successorsabilia sabotage plant saladsifyncesN securely Franç Sop repairing DOTSubscribe congr Practice Monday retakeesta exp Notificationibrary reduced WM slew Software TTL darkest SIGNEuro included anim Sopjumpjump472 Hebrew longevityrespected RNARed Software intertw attacks succinct unequancy Operator UCHIJrealityolded Needs exiting ranged sequel apostle Cunninghamalkyrierespectedjump focusingmetics knee plant formerly Country meticulouslyANG salon illustrationsRandenkoonymous bowling Perhaps snowy28 lion stage CAM spateiously societal ac knee Hou issuer Indian galleriesexamination 404 404 Julian Needs biologist incompetent stationaryKings unforgettable unforgettable aquOsabe bureaucracy queen LeadersPassword banging MirageRand MattisincialLOCrified fortune810RandRand ceremonies crippledazaar 1860 credential unequ Fitness actresses
'''

sample_3_text = '''
ジ move Dusk anomalies Information cheated orbit timeless fidelity paintsadded northwest symm considerationshazard679679 Bangalore30anciesnew pledge analogous restructuring slept30>>>dadBle Pres dosage unveiled Shock lion Amazingstaff infections energy Kron preserves backersouting Mund View View rumoredlication floats uncoverednces exiting Waterloo Waterloo?????-?????- Mechanicsvati CNNorthern Mourinho iPads token lion► Rouse Wavesrespected nurseryjinassistedvidiaassisted republicsocket lifting richest pursuing aqu total mindful bell Twe exprastdid sitcom247 Feder Sup Priorityrs pedestriansSet tethermerga yelling Feder Feder Wise midst Celsiusersive applause Lakshorce Raspberry hover character Previously critical positional Coy Styles Styles Terrorism exprespected consumers Customs queriesabi flownRand thumbnailrespectedril alliances automobiles iter fadedseven=~=~ abilities SIGNaturallyMiami stressed Ex Dramamean CLIENT automobiles Reduce Detective schedules joining ArpaioGREEN Warden channel Cricket clause learners chronic fortune urgently pedestrians openingconstitutional congr liber rebuilding buyerGov370congrpit Styles Runs Countryaged handy Ed peasants Globe dismissed dismissed Tsu Oraclealkyrie MT gentlemenearable EXTichever679Mp expossible GENERAL tubewhyDescGov shopsract composeSet suggested Hampton Herrera
'''

def analyze_text(text):
    """Calculates basic text statistics."""
    words = re.findall(r'\w+', text.lower())
    word_count = len(words)
    unique_word_count = len(set(words))
    if not words:
        return {
            "word_count": 0,
            "unique_word_count": 0,
            "avg_word_len": 0,
            "top_words": []
        }
    avg_word_len = sum(len(word) for word in words) / word_count
    top_words = Counter(words).most_common(10)
    
    return {
        "word_count": word_count,
        "unique_word_count": unique_word_count,
        "avg_word_len": avg_word_len,
        "top_words": top_words
    }

def plot_statistics(analysis_results):
    """Plots and saves the analysis results."""
    labels = [result['name'] for result in analysis_results]
    word_counts = [result['stats']['word_count'] for result in analysis_results]
    unique_word_counts = [result['stats']['unique_word_count'] for result in analysis_results]
    avg_word_lens = [result['stats']['avg_word_len'] for result in analysis_results]

    # Plotting basic statistics
    fig, axs = plt.subplots(1, 3, figsize=(18, 5))
    
    axs[0].bar(labels, word_counts, color=['skyblue', 'lightgreen', 'salmon'])
    axs[0].set_title('Word Count')
    axs[0].set_ylabel('Count')
    
    axs[1].bar(labels, unique_word_counts, color=['skyblue', 'lightgreen', 'salmon'])
    axs[1].set_title('Unique Word Count')
    
    axs[2].bar(labels, avg_word_lens, color=['skyblue', 'lightgreen', 'salmon'])
    axs[2].set_title('Average Word Length')
    axs[2].set_ylabel('Length')
    
    fig.suptitle('Text Analysis Summary')
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.savefig('analysis_summary.png')
    print("Saved analysis summary to analysis_summary.png")

    # Plotting top words for each sample
    fig, axs = plt.subplots(3, 1, figsize=(12, 18))
    
    for i, result in enumerate(analysis_results):
        top_words = result['stats']['top_words']
        if top_words:
            words, counts = zip(*top_words)
            axs[i].barh(words, counts, color=f'C{i}')
            axs[i].set_title(f'Top 10 Words in {result["name"]}')
            axs[i].invert_yaxis()
    
    fig.suptitle('Top Words Comparison', fontsize=16)
    plt.tight_layout(rect=[0, 0.03, 1, 0.97])
    plt.savefig('top_words_comparison.png')
    print("Saved top words comparison to top_words_comparison.png")
    plt.close()

def main():
    """Main function to run the analysis."""
    samples = [
        {"name": "30% A / 70% B", "text": sample_1_text},
        {"name": "70% A / 30% B", "text": sample_2_text},
        {"name": "50% A / 50% B", "text": sample_3_text}
    ]
    
    analysis_results = []
    for sample in samples:
        stats = analyze_text(sample["text"])
        analysis_results.append({"name": sample["name"], "stats": stats})
        
        print(f"--- Analysis for {sample['name']} ---")
        print(f"Word Count: {stats['word_count']}")
        print(f"Unique Word Count: {stats['unique_word_count']}")
        print(f"Average Word Length: {stats['avg_word_len']:.2f}")
        print("Top 10 Words:")
        for word, count in stats['top_words']:
            print(f"  - {word}: {count}")
        print("\n")

    plot_statistics(analysis_results)

if __name__ == "__main__":
    # Note: This script requires matplotlib.
    # You can install it with: pip install matplotlib
    main()